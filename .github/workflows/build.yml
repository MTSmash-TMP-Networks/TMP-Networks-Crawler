name: Build Executable with Chrome and ChromeDriver

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade pyinstaller
          pip install -r requirements.txt
        shell: bash

      # Download ChromeDriver
      - name: Download ChromeDriver
        run: |
          mkdir -p drivers
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/linux64/chromedriver-linux64.zip -O chromedriver.zip
            unzip chromedriver.zip -d drivers
            mv drivers/chromedriver-linux64/chromedriver drivers/chromedriver
            chmod +x drivers/chromedriver
            rm -rf chromedriver.zip drivers/chromedriver-linux64
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/mac-x64/chromedriver-mac-x64.zip -O chromedriver.zip
            unzip chromedriver.zip -d drivers
            mv drivers/chromedriver-mac-x64/chromedriver drivers/chromedriver
            chmod +x drivers/chromedriver
            rm -rf chromedriver.zip drivers/chromedriver-mac-x64
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/win64/chromedriver-win64.zip" -OutFile "chromedriver.zip"
            Expand-Archive "chromedriver.zip" -DestinationPath "drivers"
            Move-Item drivers/chromedriver-win64/chromedriver.exe drivers/chromedriver.exe
            Remove-Item -Recurse drivers/chromedriver-win64, chromedriver.zip
          fi
        shell: bash

      # Download Chrome Portable
      - name: Download Chrome Portable
        run: |
          mkdir -p chrome
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/linux64/chrome-linux64.zip -O chrome.zip
            unzip chrome.zip -d chrome
            mv chrome/chrome-linux64 chrome/chrome
            chmod +x chrome/chrome/chrome
            rm chrome.zip
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/mac-x64/chrome-mac-x64.zip -O chrome.zip
            unzip chrome.zip -d chrome
            mv chrome/chrome-mac-x64 chrome/Chrome.app
            chmod +x chrome/Chrome.app/Contents/MacOS/*
            rm chrome.zip
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/win64/chrome-win64.zip" -OutFile "chrome.zip"
            Expand-Archive chrome.zip -DestinationPath chrome
            Move-Item chrome/chrome-win64 chrome/chrome
            Remove-Item chrome.zip
          fi
        shell: bash

      # Generate Templates (App kurz starten)
      - name: Generate Templates
        run: |
          python main.py &
          PID=$!
          sleep 10
          kill -9 $PID || true
        shell: bash

      # Verify Resources
      - name: Verify Resources
        run: |
          ls -l templates
          ls -l chrome
          ls -l drivers
          [[ -f web_index.db ]] && ls -l web_index.db || echo "No DB generated"
        shell: bash

      # Build Executable (PyInstaller)
      - name: Build Executable
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            pyinstaller --onefile \
              --add-data "templates:templates" \
              --add-data "drivers:drivers" \
              --add-data "chrome/chrome:chrome/chrome" \
              main.py
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            pyinstaller --onefile \
              --add-data "templates:templates" \
              --add-data "drivers:drivers" \
              --add-data "chrome/Chrome.app:chrome/Chrome.app" \
              main.py
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            pyinstaller --onefile ^
              --add-data "templates;templates" ^
              --add-data "drivers;drivers" ^
              --add-data "chrome;chrome" ^
              main.py
          fi
        shell: bash

      # Upload Artifact
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: |
            dist/*
            chrome/
