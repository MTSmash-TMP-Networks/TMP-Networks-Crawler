name: CI Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # Schritt 1: Checkout des Repositories
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Schritt 2: Einrichten von Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # Passen Sie die Python-Version nach Bedarf an

      # Schritt 3: Caching von Pip-Abhängigkeiten zur Beschleunigung der Builds
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Schritt 4: Installieren von Abhängigkeiten und yt-dlp Nightly
      - name: Install dependencies and yt-dlp Nightly
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -U --pre "yt-dlp[default]"

      # Schritt 5: Installieren von Google Chrome
      - name: Install Google Chrome on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt update
          sudo apt install -y ./google-chrome-stable_current_amd64.deb
          rm google-chrome-stable_current_amd64.deb

      - name: Install Google Chrome on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install --cask google-chrome

      - name: Install Google Chrome on Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco install googlechrome -y

      # Schritt 6: Einrichten von ChromeDriver mit GitHub Action
      - name: Setup ChromeDriver
        uses: actions/setup-chromedriver@v3
        with:
          chrome-version: 'latest'  # Installiert die neueste ChromeDriver-Version, die mit der installierten Chrome-Version kompatibel ist

      # Schritt 7: Überprüfen der yt-dlp Installation
      - name: Check yt-dlp version
        run: |
          yt-dlp --version

      # Schritt 8: (Optional) Ausführen von Tests
      - name: Run Tests
        run: |
          # Beispiel für die Ausführung von Tests mit pytest
          # Stellen Sie sicher, dass Sie Tests definiert haben
          # pip install pytest
          # pytest

          # Wenn keine Tests definiert sind
          echo "Keine Tests definiert."

      # Schritt 9: (Optional) Starten der Anwendung und Überprüfung
      - name: Run Application
        run: |
          # Starten Sie Ihre Anwendung im Hintergrund
          python main.py &
          # Warten Sie einige Sekunden, damit die Anwendung starten kann
          sleep 5
          # Überprüfen Sie, ob der Flask-Server läuft (ersetzen Sie den Port bei Bedarf)
          curl -I http://localhost:7001 || exit 1
