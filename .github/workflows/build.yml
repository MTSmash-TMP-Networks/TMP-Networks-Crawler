name: CI Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      # Schritt 1: Checkout des Repositories
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Schritt 2: Einrichten von Python 3.11
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Schritt 3: Installieren von Abhängigkeiten und yt-dlp Nightly
      - name: Install dependencies and yt-dlp Nightly
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -U --pre "yt-dlp[default]"

      # Schritt 4: **Google Chrome installieren und überprüfen**
      - name: Install Google Chrome on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y google-chrome-stable
          google-chrome --version || { echo "Google Chrome installation failed"; exit 1; }

      - name: Install Google Chrome on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install --cask google-chrome || brew upgrade --cask google-chrome
          if [ ! -f "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" ]; then
            echo "Google Chrome installation failed"
            exit 1
          fi

      - name: Install Google Chrome on Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco upgrade googlechrome -y
          if (-Not (Test-Path "C:\Program Files\Google\Chrome\Application\chrome.exe")) { 
            Write-Error "Google Chrome installation failed"; exit 1 
          }

      # Schritt 5: (Optional) Ausführen von Tests
      - name: Run Tests
        run: echo "Keine Tests definiert."

      # Schritt 6: Anwendung starten und überprüfen (Unix)
      - name: Run Application on Unix
        if: matrix.os != 'windows-latest'
        run: |
          python main.py &
          sleep 5
          curl -I http://localhost:7001 || exit 1

      # Schritt 7: Anwendung starten und überprüfen (Windows)
      - name: Run Application on Windows
        if: matrix.os == 'windows-latest'
        run: |
          Start-Process -NoNewWindow -FilePath "python" -ArgumentList "main.py"
          Start-Sleep -Seconds 5
          curl -I http://localhost:7001 || exit 1
