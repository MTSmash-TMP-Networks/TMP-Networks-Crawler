name: CI Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      # Schritt 1: Checkout des Repositories
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Schritt 2: Einrichten von Python 3.11
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Schritt 3: Caching von Pip-Abhängigkeiten (Unix)
      - name: Cache pip (Non-Windows)
        if: matrix.os != 'windows-latest'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Schritt 3 (alternative): Caching von Pip-Abhängigkeiten (Windows)
      - name: Cache pip (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\AppData\Local\pip\Cache
          key: windows-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            windows-pip-

      # Schritt 4: Installieren von Abhängigkeiten und yt-dlp Nightly
      - name: Install dependencies and yt-dlp Nightly
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -U --pre "yt-dlp[default]"

      # Schritt 5: Installieren von Google Chrome
      - name: Install Google Chrome on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y google-chrome-stable

      - name: Install Google Chrome on macOS
        if: matrix.os == 'macos-latest'
        run: brew install --cask google-chrome

      - name: Install Google Chrome on Windows
        if: matrix.os == 'windows-latest'
        run: choco install googlechrome -y

      # Schritt 6: Einrichten von ChromeDriver (Alternative zu setup-chromedriver@v2)
      - name: Setup ChromeDriver
        uses: browser-actions/setup-chromedriver@v1
        with:
          version: 'latest'

      # Schritt 7: Überprüfen der yt-dlp Installation
      - name: Check yt-dlp version
        run: yt-dlp --version

      # Schritt 8: (Optional) Ausführen von Tests
      - name: Run Tests
        run: echo "Keine Tests definiert."

      # Schritt 9: Anwendung starten und überprüfen (Unix)
      - name: Run Application on Unix
        if: matrix.os != 'windows-latest'
        run: |
          python main.py &
          sleep 5
          curl -I http://localhost:7001 || exit 1

      # Schritt 9: Anwendung starten und überprüfen (Windows)
      - name: Run Application on Windows
        if: matrix.os == 'windows-latest'
        run: |
          start /B python main.py
          timeout /T 5
          curl -I http://localhost:7001 || exit 1
