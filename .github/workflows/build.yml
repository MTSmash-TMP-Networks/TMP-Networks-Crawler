name: CI Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      # Schritt 1: Checkout des Repositories
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Schritt 2: Einrichten von Python 3.11
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      # Schritt 3: Installieren von Abhängigkeiten und yt-dlp Nightly
      - name: Install dependencies and yt-dlp Nightly
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -U --pre "yt-dlp[default]"

      # Schritt 4: **Google Chrome installieren und überprüfen**
      - name: Install Google Chrome on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install -y google-chrome-stable
          google-chrome --version || { echo "Google Chrome installation failed"; exit 1; }

      - name: Install Google Chrome on macOS
        if: matrix.os == 'macos-latest'
        run: |
          brew install --cask google-chrome
          "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" --version || { echo "Google Chrome installation failed"; exit 1; }

      - name: Install Google Chrome on Windows
        if: matrix.os == 'windows-latest'
        run: |
          choco upgrade googlechrome -y
          if (-Not (Test-Path "C:\Program Files\Google\Chrome\Application\chrome.exe")) { 
            Write-Error "Google Chrome installation failed"; exit 1 
          }

      # Schritt 5: **Manuelle Installation von ChromeDriver**
      - name: Install ChromeDriver on Ubuntu
        if: matrix.os == 'ubuntu-latest'
        run: |
          CHROME_VERSION=$(google-chrome --version | awk '{print $3}' | cut -d '.' -f 1) || { echo "Failed to get Chrome version"; exit 1; }
          DRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
          wget -q "https://chromedriver.storage.googleapis.com/$DRIVER_VERSION/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          rm chromedriver_linux64.zip

      - name: Install ChromeDriver on macOS
        if: matrix.os == 'macos-latest'
        run: |
          CHROME_VERSION=$("/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" --version | awk '{print $3}' | cut -d '.' -f 1) || { echo "Failed to get Chrome version"; exit 1; }
          DRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION")
          wget -q "https://chromedriver.storage.googleapis.com/$DRIVER_VERSION/chromedriver_mac64.zip"
          unzip chromedriver_mac64.zip
          sudo mv chromedriver /usr/local/bin/
          rm chromedriver_mac64.zip

      - name: Install ChromeDriver on Windows
        if: matrix.os == 'windows-latest'
        run: |
          $chromePath = "C:\Program Files\Google\Chrome\Application\chrome.exe"
          if (-Not (Test-Path $chromePath)) { Write-Error "Google Chrome not found"; exit 1 }
          $chromeVersion = (Get-Command $chromePath).FileVersionInfo.FileVersion.Split(".")[0]
          $driverVersion = Invoke-RestMethod -Uri "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$chromeVersion"
          Invoke-WebRequest -Uri "https://chromedriver.storage.googleapis.com/$driverVersion/chromedriver_win32.zip" -OutFile "chromedriver_win32.zip"
          Expand-Archive -Path "chromedriver_win32.zip" -DestinationPath "C:\Windows\System32"
          Remove-Item "chromedriver_win32.zip"

      # Schritt 6: Überprüfen der Chrome- und ChromeDriver-Versionen
      - name: Check Chrome and ChromeDriver versions
        run: |
          if [[ "$RUNNER_OS" == "macOS" ]]; then
            "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" --version || echo "Chrome not found"
          else
            google-chrome --version || echo "Chrome not found"
          fi
          chromedriver --version || echo "ChromeDriver not found"

      # Schritt 7: (Optional) Ausführen von Tests
      - name: Run Tests
        run: echo "Keine Tests definiert."

      # Schritt 8: Anwendung starten und überprüfen (Unix)
      - name: Run Application on Unix
        if: matrix.os != 'windows-latest'
        run: |
          python main.py &
          sleep 5
          curl -I http://localhost:7001 || exit 1

      # Schritt 8: Anwendung starten und überprüfen (Windows)
      - name: Run Application on Windows
        if: matrix.os == 'windows-latest'
        run: |
          start /B python main.py
          timeout /T 5
          curl -I http://localhost:7001 || exit 1
