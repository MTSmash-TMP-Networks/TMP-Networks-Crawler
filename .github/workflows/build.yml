name: Build Executable with Chrome and ChromeDriver
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies on Unix
        if: matrix.os != 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash

      - name: Install Dependencies on Windows
        if: matrix.os == 'windows-latest'
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade pyinstaller
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
        shell: pwsh

      # Download ChromeDriver
      - name: Download ChromeDriver on Unix
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p drivers
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/linux64/chromedriver-linux64.zip -O chromedriver.zip
            unzip chromedriver.zip -d drivers
            mv drivers/chromedriver-linux64/chromedriver drivers/chromedriver
            chmod +x drivers/chromedriver
            rm -rf drivers/chromedriver-linux64 chromedriver.zip
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/mac-x64/chromedriver-mac-x64.zip -O chromedriver.zip
            unzip chromedriver.zip -d drivers
            mv drivers/chromedriver-mac-x64/chromedriver drivers/chromedriver
            chmod +x drivers/chromedriver
            rm -rf drivers/chromedriver-mac-x64 chromedriver.zip
          fi
        shell: bash

      - name: Download ChromeDriver on Windows
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -Force drivers
          Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/win64/chromedriver-win64.zip" -OutFile "chromedriver.zip"
          Expand-Archive "chromedriver.zip" -DestinationPath "drivers"
          Move-Item drivers/chromedriver-win64/chromedriver.exe drivers/chromedriver.exe
          Remove-Item -Recurse drivers/chromedriver-win64, chromedriver.zip
        shell: pwsh

      # Download Chrome Portable
      - name: Download Chrome Portable on Unix
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p chrome
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/linux64/chrome-linux64.zip -O chrome.zip
            unzip chrome.zip -d chrome
            mv chrome/chrome-linux64 chrome/chrome
            rm chrome.zip
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            arch=$(uname -m)
            if [[ "$arch" == "arm64" ]]; then
              wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/mac-arm64/chrome-mac-arm64.zip -O chrome.zip
              unzip chrome.zip -d chrome
              mv chrome/chrome-mac-arm64 chrome/Chrome.app
            else
              wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/mac-x64/chrome-mac-x64.zip -O chrome.zip
              unzip chrome.zip -d chrome
              mv chrome/chrome-mac-x64 chrome/Chrome.app
            fi
            rm chrome.zip
          fi
        shell: bash

      - name: Download Chrome Portable on Windows
        if: matrix.os == 'windows-latest'
        run: |
          mkdir -Force chrome
          Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/win64/chrome-win64.zip" -OutFile "chrome.zip"
          Expand-Archive chrome.zip -DestinationPath chrome
          Move-Item chrome/chrome-win64 chrome/chrome
          Remove-Item chrome.zip
        shell: pwsh

      # Start Application to Generate Templates
      - name: Start Application to Generate Templates on Unix
        if: matrix.os != 'windows-latest'
        run: |
          python main.py &
          PID=$!
          sleep 10
          kill $PID || true
        shell: bash

      - name: Start Application to Generate Templates on Windows
        if: matrix.os == 'windows-latest'
        run: |
          Start-Process -NoNewWindow -FilePath python -ArgumentList "main.py"
          Start-Sleep -Seconds 10
          Stop-Process -Name python -Force
        shell: pwsh

      # Verify Resources
      - name: Verify Resources on Unix
        if: matrix.os != 'windows-latest'
        run: |
          ls templates
          ls web_index.db || echo "No DB"
          ls chrome
          ls drivers
        shell: bash

      - name: Verify Resources on Windows
        if: matrix.os == 'windows-latest'
        run: |
          Get-ChildItem templates
          if (Test-Path "web_index.db") { Get-ChildItem web_index.db } else { Write-Output "No DB" }
          Get-ChildItem chrome
          Get-ChildItem drivers
        shell: pwsh

      # Build Executable
      - name: Build Executable on Unix (Linux/macOS)
        if: matrix.os != 'windows-latest'
        run: |
          pyinstaller --onefile \
            --add-data "templates:templates" \
            --add-data "web_index.db:." \
            --add-data "drivers:drivers" \
            main.py
        shell: bash

      - name: Build Executable on Windows
        if: matrix.os == 'windows-latest'
        run: |
          pyinstaller --onefile ^
            --add-data "templates;templates" ^
            --add-data "web_index.db;." ^
            --add-data "drivers;drivers" ^
            main.py
        shell: cmd

      # Kopiere zusätzliche Ressourcen separat
      - name: Copy Chrome App to Dist on macOS
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p dist/chrome
          cp -R chrome/Chrome.app dist/chrome/
        shell: bash

      # Sicherstellen der Ausführbarkeit von Chrome auf macOS und Linux
      - name: Make Chrome Executable on Unix
        if: matrix.os != 'windows-latest'
        run: |
          if [[ "${{ matrix.os }}" != "windows-latest" ]]; then
            chmod +x chrome/chrome/chrome
          fi
        shell: bash

      # Artefakte hochladen
      - name: Upload Executable Artifact on Unix (Linux/macOS)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: |
            dist/main
            dist/chrome

      - name: Upload Executable Artifact on Windows
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: |
            dist\main.exe
            chrome
