name: Build Executable with Dynamic Templates, Database and Portable Chrome

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash

      # Starte die App, damit die Templates (und ggf. initiale DB-Struktur) generiert werden.
      - name: Start Application to Generate Templates
        run: |
          python main.py &
          PID=$!
          sleep 10
          kill $PID || true
        shell: bash

      - name: Verify Templates, DB, Drivers and Portable Chrome
        run: |
          ls templates
          ls web_index.db || echo "Datenbank existiert nicht"
          ls chrome || echo "Portable Chrome existiert nicht"
        shell: bash

      # Sicherstellen, dass der Ordner "drivers" existiert â€“ falls nicht, lege ihn mit einer Dummy-Datei an.
      - name: Ensure drivers folder exists
        run: |
          if [ ! -d drivers ]; then
            mkdir drivers
            echo "dummy" > drivers/dummy.txt
          fi
          ls drivers
        shell: bash

      - name: Build Executable on Unix (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          pyinstaller --onefile --add-data "templates:templates" --add-data "web_index.db:." --add-data "drivers:drivers" --add-data "chrome:chrome" main.py
        shell: bash

      - name: Build Executable on Windows
        if: runner.os == 'Windows'
        run: |
          pyinstaller --onefile --add-data "templates;templates" --add-data "web_index.db;." --add-data "drivers;drivers" --add-data "chrome;chrome" main.py
        shell: cmd

      - name: Upload Executable Artifact
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: dist/main*
