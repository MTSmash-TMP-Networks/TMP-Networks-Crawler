name: Build Executable with Chrome and ChromeDriver

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash

      # ChromeDriver
      - name: Download ChromeDriver
        shell: bash
        run: |
          mkdir -p drivers
          if [ "${{ runner.os }}" = "Linux" ]; then
            wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/linux64/chromedriver-linux64.zip -O chromedriver.zip
            unzip chromedriver.zip -d drivers && mv drivers/chromedriver-linux64/chromedriver drivers/chromedriver
            chmod +x drivers/chromedriver
            rm -rf drivers/chromedriver-linux64 chromedriver.zip
          elif [ "${{ runner.os }}" = "macOS" ]; then
            wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/mac-x64/chromedriver-mac-x64.zip -O chromedriver.zip
            unzip chromedriver.zip -d drivers && mv drivers/chromedriver-mac-x64/chromedriver drivers/chromedriver
            chmod +x drivers/chromedriver
            rm -rf drivers/chromedriver-mac-x64 chromedriver.zip
          else
            Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/win64/chromedriver-win64.zip" -OutFile "chromedriver.zip"
            Expand-Archive "chromedriver.zip" -DestinationPath "drivers"
            Move-Item drivers/chromedriver-win64/chromedriver.exe drivers/chromedriver.exe
            Remove-Item -Recurse drivers/chromedriver-win64, chromedriver.zip
          fi

      # Chrome Portable (komplett!)
      - name: Download Chrome Portable
        shell: bash
        run: |
          mkdir -p chrome
          if [ "${{ runner.os }}" = "Linux" ]; then
            wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/linux64/chrome-linux64.zip -O chrome.zip
            unzip chrome.zip -d chrome && mv chrome/chrome-linux64 chrome/chrome
            rm chrome.zip
          elif [ "${{ runner.os }}" = "macOS" ]; then
            arch=$(uname -m)
            if [ "$arch" = "arm64" ]; then
              wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/mac-arm64/chrome-mac-arm64.zip -O chrome.zip
              unzip chrome.zip -d chrome && mv chrome/chrome-mac-arm64 chrome/Chrome.app
            else
              wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/mac-x64/chrome-mac-x64.zip -O chrome.zip
              unzip chrome.zip -d chrome && mv chrome/chrome-mac-x64 chrome/Chrome.app
            fi
            rm chrome.zip
          else
            Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/win64/chrome-win64.zip" -OutFile "chrome.zip"
            Expand-Archive chrome.zip -DestinationPath chrome
            Move-Item chrome/chrome-win64 chrome/chrome
            Remove-Item chrome.zip
          fi
        shell: bash

      # Starte kurz um DB & Templates zu erzeugen
      - name: Start Application to Generate Templates
        run: |
          python main.py &
          PID=$!
          sleep 10
          kill $PID || true
        shell: bash

      # Pr√ºfen der Dateien
      - name: Verify Resources
        run: |
          ls templates
          ls web_index.db || echo "No DB"
          ls chrome
          ls drivers
        shell: bash

      # Build
      - name: Build Executable on Unix (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          pyinstaller --onefile \
            --add-data "templates:templates" \
            --add-data "web_index.db:." \
            --add-data "drivers:drivers" \
            --add-data "chrome:chrome" \
            --codesign-identity "-" \
            main.py
        shell: bash

      - name: Build Executable on Windows
        if: runner.os == 'Windows'
        run: |
          pyinstaller --onefile ^
            --add-data "templates;templates" ^
            --add-data "web_index.db;." ^
            --add-data "drivers;drivers" ^
            --add-data "chrome;chrome" ^
            main.py
        shell: cmd

      # Artefakte hochladen
      - name: Upload Executable Artifact
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: dist/main*
