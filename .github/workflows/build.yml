name: Build Executable with Dynamic Templates, Database, Portable Chrome and Automatic ChromeDriver

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash

      # --- ChromeDriver automatisch herunterladen ---
      - name: Download ChromeDriver for Linux
        if: runner.os == 'Linux'
        run: |
          mkdir -p drivers
          wget -q https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip -O chromedriver.zip
          unzip -o chromedriver.zip -d drivers
          chmod +x drivers/chromedriver
          rm chromedriver.zip
        shell: bash

      - name: Download ChromeDriver for macOS
        if: runner.os == 'macOS'
        run: |
          mkdir -p drivers
          wget -q https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_mac64.zip -O chromedriver.zip
          unzip -o chromedriver.zip -d drivers
          chmod +x drivers/chromedriver
          rm chromedriver.zip
        shell: bash

      - name: Download ChromeDriver for Windows
        if: runner.os == 'Windows'
        run: |
          mkdir drivers
          Invoke-WebRequest -Uri "https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_win32.zip" -OutFile "chromedriver.zip"
          Expand-Archive -Path "chromedriver.zip" -DestinationPath "drivers"
          Remove-Item "chromedriver.zip"
        shell: powershell

      # --- Portable Chromium automatisch herunterladen ---
      - name: Download Portable Chromium for Linux
        if: runner.os == 'Linux'
        run: |
          mkdir -p chrome
          wget -q https://commondatastorage.googleapis.com/chromium-browser-snapshots/Linux_x64/1272056/chrome-linux.zip -O chrome/chrome-linux.zip
          unzip -o chrome/chrome-linux.zip -d chrome
          rm chrome/chrome-linux.zip
        shell: bash

      - name: Download Portable Chromium for macOS
        if: runner.os == 'macOS'
        run: |
          mkdir -p chrome
          wget -q https://commondatastorage.googleapis.com/chromium-browser-snapshots/Mac/1272056/chrome-mac.zip -O chrome/chrome-mac.zip
          unzip -o chrome/chrome-mac.zip -d chrome
          rm chrome/chrome-mac.zip
        shell: bash

      - name: Download Portable Chromium for Windows
        if: runner.os == 'Windows'
        run: |
          mkdir chrome
          Invoke-WebRequest -Uri "https://commondatastorage.googleapis.com/chromium-browser-snapshots/Win/1272056/chrome-win.zip" -OutFile "chrome/chrome-win.zip"
          Expand-Archive -Path "chrome/chrome-win.zip" -DestinationPath "chrome"
          Remove-Item "chrome/chrome-win.zip"
        shell: powershell

      # --- App starten, damit dynamisch die Templates (und ggf. die DB-Struktur) generiert werden ---
      - name: Start Application to Generate Templates
        run: |
          python main.py &
          PID=$!
          sleep 10
          kill $PID || true
        shell: bash

      - name: Verify Resources
        run: |
          echo "Templates:"
          ls templates
          echo "Database:"
          ls web_index.db || echo "Database not found"
          echo "Portable Chrome:"
          ls chrome
          echo "Drivers:"
          ls drivers
        shell: bash

      - name: Build Executable on Unix (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          pyinstaller --onefile --add-data "templates:templates" --add-data "web_index.db:." --add-data "drivers:drivers" --add-data "chrome:chrome" main.py
        shell: bash

      - name: Build Executable on Windows
        if: runner.os == 'Windows'
        run: |
          pyinstaller --onefile --add-data "templates;templates" --add-data "web_index.db;." --add-data "drivers;drivers" --add-data "chrome;chrome" main.py
        shell: cmd

      - name: Upload Executable Artifact
        uses: actions/upload-artifact@v2
        with:
          name: executable-${{ matrix.os }}
          path: dist/main*
