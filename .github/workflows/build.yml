name: CI Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      # Schritt 1: Checkout des Repositories
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Schritt 2: Einrichten von Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'  # Passen Sie die Python-Version nach Bedarf an

      # Schritt 3: Installieren von Abhängigkeiten
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Schritt 4: Installieren von Google Chrome
      - name: Install Google Chrome
        if: matrix.os == 'ubuntu-latest'
        run: |
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt update
          sudo apt install -y ./google-chrome-stable_current_amd64.deb
          rm google-chrome-stable_current_amd64.deb

      - name: Install Google Chrome (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install --cask google-chrome

      - name: Install Google Chrome (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          choco install googlechrome -y

      # Schritt 5: Installieren von ChromeDriver
      - name: Install ChromeDriver
        run: |
          # Ermitteln der Chrome-Version
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]] || [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            CHROME_VERSION=$(google-chrome --version | grep -oP '\d+\.\d+\.\d+')
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            CHROME_VERSION=$(googlechrome --version | grep -oP '\d+\.\d+\.\d+')
          fi

          echo "Chrome Version: $CHROME_VERSION"

          # Ermitteln der kompatiblen ChromeDriver-Version
          CHROMEDRIVER_VERSION=$(curl -s "https://chromedriver.storage.googleapis.com/LATEST_RELEASE_$CHROME_VERSION" || echo "latest")

          echo "ChromeDriver Version: $CHROMEDRIVER_VERSION"

          # Herunterladen und Installieren von ChromeDriver
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            wget https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_linux64.zip
            unzip chromedriver_linux64.zip
            sudo mv chromedriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/chromedriver
            rm chromedriver_linux64.zip
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            wget https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_mac64.zip
            unzip chromedriver_mac64.zip
            sudo mv chromedriver /usr/local/bin/
            sudo chmod +x /usr/local/bin/chromedriver
            rm chromedriver_mac64.zip
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            Invoke-WebRequest -Uri "https://chromedriver.storage.googleapis.com/${CHROMEDRIVER_VERSION}/chromedriver_win32.zip" -OutFile "chromedriver_win32.zip"
            Expand-Archive -Path chromedriver_win32.zip -DestinationPath ./chromedriver
            Move-Item -Path ./chromedriver/chromedriver.exe -Destination "C:\Windows\System32\chromedriver.exe"
            Remove-Item -Recurse -Force chromedriver_win32.zip chromedriver
          fi

      # Schritt 6: (Optional) Ausführen von Tests
      - name: Run Tests
        run: |
          # Führen Sie hier Ihre Test-Skripte aus
          # Beispiel: pytest
          # pip install pytest
          # pytest
          echo "Keine Tests definiert."

      # Schritt 7: (Optional) Starten der Anwendung
      - name: Run Application
        run: |
          # Starten Sie Ihre Anwendung, um sicherzustellen, dass sie ohne Fehler initialisiert wird.
          # Dies kann durch das Ausführen von main.py erfolgen.
          # Bitte passen Sie den Befehl entsprechend an, falls zusätzliche Parameter erforderlich sind.
          python main.py &
          # Warten Sie einige Sekunden, damit die Anwendung starten kann
          sleep 5
          # Überprüfen Sie, ob der Flask-Server läuft (optional)
          curl -I http://localhost:7001
