name: Build Executable with Dynamic Templates, Database, Portable Chrome and Automatic ChromeDriver

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        shell: bash

      # --- ChromeDriver herunterladen ---
      - name: Download ChromeDriver for Linux
        if: runner.os == 'Linux'
        run: |
          mkdir -p drivers
          wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/linux64/chromedriver-linux64.zip -O chromedriver.zip
          unzip -o chromedriver.zip -d drivers
          mv drivers/chromedriver-linux64/chromedriver drivers/chromedriver
          chmod +x drivers/chromedriver
          rm -rf drivers/chromedriver-linux64 chromedriver.zip
        shell: bash

      - name: Download ChromeDriver for macOS
        if: runner.os == 'macOS'
        run: |
          mkdir -p drivers
          wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/mac-x64/chromedriver-mac-x64.zip -O chromedriver.zip
          unzip -o chromedriver.zip -d drivers
          mv drivers/chromedriver-mac-x64/chromedriver drivers/chromedriver
          chmod +x drivers/chromedriver
          rm -rf drivers/chromedriver-mac-x64 chromedriver.zip
        shell: bash

      - name: Download ChromeDriver for Windows
        if: runner.os == 'Windows'
        run: |
          mkdir drivers
          Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/win64/chromedriver-win64.zip" -OutFile "chromedriver.zip"
          Expand-Archive -Path "chromedriver.zip" -DestinationPath "drivers"
          Move-Item -Path "drivers/chromedriver-win64/chromedriver.exe" -Destination "drivers/chromedriver.exe"
          Remove-Item -Recurse -Force "drivers/chromedriver-win64","chromedriver.zip"
        shell: powershell

      # --- Portable Chrome herunterladen ---
      - name: Download Portable Chrome for Linux
        if: runner.os == 'Linux'
        run: |
          mkdir -p chrome
          wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/linux64/chrome-linux64.zip -O chrome.zip
          unzip chrome.zip -d chrome
          rm chrome.zip
        shell: bash

      - name: Download Portable Chrome for macOS (nur Binary!)
        if: runner.os == 'macOS'
        run: |
          mkdir -p chrome
          arch=$(uname -m)
          if [ "$arch" = "arm64" ]; then
            wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/mac-arm64/chrome-mac-arm64.zip -O chrome.zip
            unzip chrome.zip -d chrome
            mv "chrome/chrome-mac-arm64/Google Chrome for Testing.app/Contents/MacOS/Google Chrome for Testing" chrome/chrome
            rm -rf chrome/chrome-mac-arm64 chrome.zip
          else
            wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/mac-x64/chrome-mac-x64.zip -O chrome.zip
            unzip chrome.zip -d chrome
            mv "chrome/chrome-mac-x64/Google Chrome for Testing.app/Contents/MacOS/Google Chrome for Testing" chrome/chrome
            rm -rf chrome/chrome-mac-x64 chrome.zip
          fi
          chmod +x chrome/chrome
        shell: bash

      - name: Download Portable Chrome for Windows
        if: runner.os == 'Windows'
        run: |
          mkdir chrome
          Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-for-testing-public/134.0.6998.165/win64/chrome-win64.zip" -OutFile "chrome.zip"
          Expand-Archive -Path "chrome.zip" -DestinationPath "chrome"
          Remove-Item "chrome.zip"
        shell: powershell

      # --- App starten f√ºr Templates & DB ---
      - name: Start Application to Generate Templates
        run: |
          python main.py &
          PID=$!
          sleep 10
          kill $PID || true
        shell: bash

      # --- Verify Resources ---
      - name: Verify Resources
        run: |
          echo "Templates:" && ls templates
          echo "Database:" && ls web_index.db || echo "Database not found"
          echo "Portable Chrome:" && ls chrome
          echo "Drivers:" && ls drivers
        shell: bash

      # --- Build Executable on macOS ---
      - name: Build Executable on macOS
        if: runner.os == 'macOS'
        run: |
          pyinstaller --onefile \
            --add-data "templates:templates" \
            --add-data "web_index.db:." \
            --add-data "drivers:drivers" \
            --add-data "chrome:chrome" \
            --codesign-identity="-" \
            main.py
        shell: bash

      # --- Build Executable on Linux ---
      - name: Build Executable on Linux
        if: runner.os == 'Linux'
        run: |
          pyinstaller --onefile \
            --add-data "templates:templates" \
            --add-data "web_index.db:." \
            --add-data "drivers:drivers" \
            --add-data "chrome:chrome" \
            main.py
        shell: bash

      # --- Build Executable on Windows ---
      - name: Build Executable on Windows
        if: runner.os == 'Windows'
        run: |
          pyinstaller --onefile ^
            --add-data "templates;templates" ^
            --add-data "web_index.db;." ^
            --add-data "drivers;drivers" ^
            --add-data "chrome;chrome" ^
            main.py
        shell: cmd

      # --- Upload Executable Artifact ---
      - name: Upload Executable Artifact
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: dist/main*
