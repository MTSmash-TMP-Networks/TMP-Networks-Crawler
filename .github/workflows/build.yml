name: Build Executable with Chrome and ChromeDriver

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt
        shell: bash

      - name: Download ChromeDriver (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir -p drivers
          wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6990.2/linux64/chromedriver-linux64.zip -O chromedriver.zip
          unzip chromedriver.zip -d drivers
          mv drivers/chromedriver-linux64/chromedriver drivers/chromedriver
          chmod +x drivers/chromedriver
          rm -rf chromedriver.zip drivers/chromedriver-linux64
        shell: bash

      - name: Download ChromeDriver (macOS)
        if: runner.os == 'macOS'
        run: |
          mkdir -p drivers
          wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6990.2/mac-arm64/chromedriver-mac-arm64.zip -O chromedriver.zip
          unzip chromedriver.zip -d drivers
          mv drivers/chromedriver-mac-arm64/chromedriver drivers/chromedriver
          chmod +x drivers/chromedriver
          rm -rf chromedriver.zip drivers/chromedriver-mac-arm64
        shell: bash

      - name: Download ChromeDriver (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir drivers
          Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-for-testing-public/134.0.6990.2/win64/chromedriver-win64.zip" -OutFile "chromedriver.zip"
          Expand-Archive chromedriver.zip -DestinationPath drivers
          Move-Item drivers/chromedriver-win64/chromedriver.exe drivers/chromedriver.exe
          Remove-Item -Recurse drivers/chromedriver-win64, chromedriver.zip
        shell: pwsh

      - name: Download Chrome Portable (Linux)
        if: runner.os == 'Linux'
        run: |
          mkdir -p chrome
          wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6990.2/linux64/chrome-linux64.zip -O chrome.zip
          unzip chrome.zip -d chrome
          mv chrome/chrome-linux64 chrome/chrome
          chmod +x chrome/chrome/chrome
          rm chrome.zip
        shell: bash

      - name: Download Chrome Portable (macOS)
        if: runner.os == 'macOS'
        run: |
          mkdir -p chrome
          wget -q https://storage.googleapis.com/chrome-for-testing-public/134.0.6990.2/mac-arm64/chrome-mac-arm64.zip -O chrome.zip
          unzip chrome.zip -d chrome
          mv "chrome/chrome-mac-arm64/Google Chrome for Testing.app" "chrome/Chrome.app"
          chmod -R +x "chrome/Chrome.app/Contents/MacOS/"
          rm -rf chrome/chrome-mac-arm64 chrome.zip
        shell: bash

      - name: Download Chrome Portable (Windows)
        if: runner.os == 'Windows'
        run: |
          mkdir chrome
          Invoke-WebRequest -Uri "https://storage.googleapis.com/chrome-for-testing-public/134.0.6990.2/win64/chrome-win64.zip" -OutFile "chrome.zip"
          Expand-Archive chrome.zip -DestinationPath chrome
          Move-Item chrome/chrome-win64 chrome/chrome
          Remove-Item chrome.zip
        shell: pwsh

      - name: Generate Templates (short run)
        run: |
          python main.py &
          PID=$!
          sleep 10
          kill -9 $PID || true
        shell: bash

      - name: Verify Resources
        run: |
          ls -l templates
          ls -l chrome
          ls -l drivers
          if [[ -f web_index.db ]]; then ls -l web_index.db; else echo "No DB generated"; fi
        shell: bash

      - name: Build Executable (Linux)
        if: runner.os == 'Linux'
        run: |
          pyinstaller --onefile \
            --add-data "templates:templates" \
            --add-data "drivers:drivers" \
            --add-data "chrome/chrome:chrome/chrome" \
            main.py
        shell: bash

      - name: Build Executable (macOS)
        if: runner.os == 'macOS'
        run: |
          pyinstaller --onefile \
            --add-data "templates:templates" \
            --add-data "drivers:drivers" \
            --add-data "chrome/Chrome.app:chrome/Chrome.app" \
            main.py
        shell: bash

      - name: Build Executable (Windows)
        if: runner.os == 'Windows'
        run: |
          pyinstaller --onefile ^
            --add-data "templates;templates" ^
            --add-data "drivers;drivers" ^
            --add-data "chrome;chrome" ^
            main.py
        shell: cmd

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: executable-${{ matrix.os }}
          path: |
            dist/*
            chrome/
